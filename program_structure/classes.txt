## ---------------------------------------------------------------------------------------------------------------
# This file will contain the workflow in the conceptual development of classes for the simulation
# NOTE: The new additions and changes, as they occur, also have to be reported in the notes.
## ---------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------

System:

Definition = Is the class that contains every variable and class necessary for the simulation to be executed.
Attributes:
	+ts (int) = Timestep of the simulation.
	+The rest of the variables will change with the simulation, but normally, there are:
	+mesh (Mesh).
	+pic (PIC).
	+fields (Field) = Probably several of them.
	+species (species) = Probably several of them.
	+part_solver (Motion_Solver).
Methods:
	+Remark about init(): It will "declare" the attributes necessary for the simulation to run. The actual assignment of atributes
		to instances of each class will occur during the 'initial condition' section of 'main.py'.
	+arrangePickle() : Variable = Return the attributes necessary to store the state of the system, in the order required.
	+arrangeVTK() : Variable = Return the atrributes for save and load of/from VTK files, in the "order required".

---------------------------------------------------------------------------------------------------------------------------------------

Mesh (Abstract)(Association between Mesh and PIC):

Definition = Defines the type of mesh.
Attributes:
	+nPoints (int) = Number of points in the mesh.
	+boundaries ([Boundary]) = List of different boundaries that define the mesh.
	+volumes ([double]) = Volume of each node.
    +location ([int]) = indexes indicating all the nodes that are boundaries in the mesh. There might be different arrangement or repeated indices according to
        every type of mesh.
Methods:
	+setDomain() = This function, with the values provided by the boundary files, will create the mesh, by setting up volumes, nPoints, boundaries and any other subclass variable.
	+getPosition([int] i): [double, double y] = For a each index return its real position.
	+getIndex([double,double] pos): [double,double] = For each real position returns its index value. Important to remember that the number of columns may vary
           depending on the actual type of mesh subclass used.
	+arrayToIndex([ind] array): [int, int] = For the indexes in the 1D array, obtain the indexes used for the particular mesh.
	+indexToArray([ind, ind] index): [int] = For the indexes used for the particular mesh, obtain the 1D version for the array.
    +vtkOrdering(array): array = The array received as argument is ordered in such a way it can be stored ina VTK file.
        The result is returned as a new array.
    +vtkOrdering(array): array = The array received as argument comes with vtk ordering and is reshaped to be stored properly in the code.
    +vtkReader(): Reader = Return the reader from module vtk that is able to read the vtk file.
	+saveVTK(string filename, dict dictionary) = It calls the appropiate method in 'vtk' module to print the information of the system in a '.vtk' file.
	+print() = Print a VTK file / Matplotlib visualization of the mesh (points and connections between nodes). Also print volumes.

--------------------------------------------

Mesh_recursive (Abstract):

Definition = Abstract class that works as an interface for classes meant to be recursive.
Attributes:
	+root (Boolean) = Identifies whether the object is the root of the tree or not.
	+id (String) = String that uniquely identifies the mesh among the meshes of the domain. The identity is assigned as:
           ID is organized as a chain of numbers separated by dashes, everything stored as a string. The first number is "0", indicating root of the tree.
           The second level is a 0-based index describing the position of the child in the parent mesh. 
           For the third and successive levels, the same approach is applied, until the mesh being identified is finally reached.
	+start_ind (int) = node index in the parent mesh where this mesh starts.
       +choldren ([Mesh]) = List of all the children of the mesh.
Methods:
	+flatIndexing((String) ID, (int) index): int flat_ind = The function receives a unique description of a node in the domain by the index of the node in its mesh (index), and the ID of such mesh (ID).
           Then, the function returns the index that represents the node under the 'Flat indexation' rule, counting from the mesh that executes the function.
       +executeFunctionByIndex((String) ID, (int) index, (method) func, *args, **kwargs): This function searches for the mesh that contains the node denoted by 'index' (Counting from the mesh that executes
           'executeFunctionByIndex' for the first time) and then executes 'self.func(*args, **kwargs)'.
       +orderedIndexing((int) index): (String) ID, (int) index = This functions operates inversely to 'flatIndexing(ID, index)'. It receives a node identification, counting from the mesh that
           executes the function, and returns its unique identification by giving the index of the node in its correspondent mesh as well as the 'ID' of such mesh.
       +sortArrayByMeshes((ndarray) array, seedList = []) [ndarray] = This function receives the values for the nodes of the mesh and its NGs, ordered by 'Flat indexexation ru√±e', 
           and returns a list of arrays with the same values of the original array but now sorted by 'Ordered rule', each array being containing the values of one mesh.

--------------------------------------------

Mesh_2D_rm (Inherits from Mesh):

#Definition = Mesh class for a 2D rectangular mesh. The organization of the points will work as 0<=i<nx and 0<=j<ny. Also, for k parameter 0<=k<nPoints, k = nx*j+i.
Attributes:
	+xmin (double) = Left limit of the domain (closest to the Sun).
	+xmax (double) = Right limit of the domain (farthest from the Sun).
	+ymin (double) = Bottom limit of the domain.
	+ymax (double) = Top limit of the domain.
	+depth (double) = Artificial thickness of the domain, to make it three-dimensional.
	+nx (int) = Number of nodes in the x direction.
	+ny (int) = Number of nodes in the y direction.
    +dx (float32) = Distance between adyacent horizontal nodes
    +dy (float32) = Distance between adyacent vertical nodes
	+boundaries ([Boundary]) = It is [Outer_2D_Rectangular].
	+Mesh class attributes.
Methods:
	+Implementation of Mesh methods.

--------------------------------------------

Mesh_2D_rm_separateBorders (Inherits from Mesh_2D_rm):

Definition = Mesh class for a 2D rectangular mesh. The organization of the points will work as 0<=i<nx and 0<=j<ny. Also, for k parameter 0<=k<nPoints, k = nx*j+i.
               It differes from 'Mesh_2D_rm' in that instead of a single rectangular boundary, they bondaries are 4 1D boundaries, organized as
               [bottom, right, top, left].
Attributes:
	+xmin (double) = Left limit of the domain (closest to the Sun).
	+xmax (double) = Right limit of the domain (farthest from the Sun).
	+ymin (double) = Bottom limit of the domain.
	+ymax (double) = Top limit of the domain.
	+depth (double) = Artificial thickness of the domain, to make it three-dimensional.
	+nx (int) = Number of nodes in the x direction.
	+ny (int) = Number of nodes in the y direction.
       +dx (float32) = Distance between adyacent horizontal nodes
       +dy (float32) = Distance between adyacent vertical nodes
       +boundaries ([Boundary]) = It is [Outer_1D_Rectangular x 4], with the order [bottom, right, top, left].
       +Mesh class attributes.
Methods:
	+Implementation of Mesh methods.

--------------------------------------------

Mesh_2D_rm_sat (Inherits from Mesh):

Definition = Mesh class for a 2D rectangular mesh with a rectangular satellite at its center.
   The organization of the points will work as 0<=i<nx and 0<=j<ny, but taking into account the hole for the sattelite.
Attributes:
	+xmin (double) = Left limit of the domain (closest to the Sun).
	+xmax (double) = Right limit of the domain (farthest from the Sun).
	+ymin (double) = Bottom limit of the domain.
	+ymax (double) = Top limit of the domain.
	+xminsat (double) = Left limit of the satellite (closest to the Sun).
	+xmaxsat (double) = Right limit of the satellite (farthest from the Sun).
	+yminsat (double) = Bottom limit of the satellite.
	+ymaxsat (double) = Top limit of the satellite.
	+depth (double) = Artificial thickness of the domain, to make it three-dimensional.
   +dx (float32) = Distance between adyacent horizontal nodes
   +dy (float32) = Distance between adyacent vertical nodes
	+nx (int) = Number of nodes in the x direction.
	+ny (int) = Number of nodes in the y direction.
	+nxsat (int) = Number of nodes in the x direction.
	+nysat (int) = Number of nodes in the y direction.
   +boundaries ([Boundary]) = It is [Outer_2D_Rectangular].
   +Mesh class attributes.
Methods:
	+Implementation of Mesh methods.

---------------------------------------------------------------------------------------------------------------------------------------

PIC (Abstract)(Association between Mesh and PIC):

Definition = Indicate the methods that all PIC classes have to implement. Each PIC concrete class will depend on the type of mesh, as well as the type of PIC algorithm implemented.
Attributes:
	+mesh (Mesh) = Instance of the mesh class for later use of getIndex().
Methods:
	+scatter([double, double] positions, [double] values, [double] field) = Receives the positions of the particles, and makes scatter procedure, calculating the values of field for each node.
	+gather([double, double] positions, [double, double] field): [double, double]field_p = Calculates values of the field in particles' positions, returning these values in an array as long as positions,
        The columns are the (x,y,z) components
    +scatterDiffSq([double, double] positions, [double] values, [double] array_diff, [double] field) = Makes a PIC averaging over 
        (values-array_diff)**2 in all the nodes involved for every particle in positions. 
        Thus, array_diff an field need to have the same dimension, and values have to be broadcastable to the len of positions.

--------------------------------------------

PIC_2D_rm1o (Inherits from PIC):

Definition = PIC class for rm10 ('r'ectangular 'm'esh, '1'st 'o'rder implementation).
Attributes:
	+PIC class attributes.
Methods:
	+Implementation of PIC class methods.
	+scatterDensity (Species) = return densities of that species in every node of the mesh.
	+scatterVelocity (Species) = return velocities of that species in every node of the mesh.
	+scatter_flux = return flux of particles of that species into every indicated node (not all the mesh).
	+scatter_velocity = return velocities of that species in every node of the mesh.
    +scatterTemperature(Species) = return temperature of that species in every node of the mesh.

---------------------------------------------------------------------------------------------------------------------------------------

Species (Abstract):

Definition = This abstract class is the wrapper for everything related to particles. Any species of particles inherits from this class.
Attributes:
	+name (string) = some string descriptor that indicate the type/source of particles.
	+dt (double) = timestep for the motion of the particle.
	+q (double) = charge of the species.
	+m (double) = mass of the species.
	+q_over_m (double) = q/m.
	+debye (double) = Debye length of the spcies.
	+spwt (int) = specific weight of the species.
    +pos_dim (int) = number of components of position
    +vel_dim(int) = number of components of the velocity
	+mesh_values (Particles_In_Mesh) = object to store anything related with the particles in the mesh.
	+part_values (Particles) = oject to store anything related to the actual particles in physical space.
Notes:
       +__init__() receives nPoints from mesh
       +saveVTK(Mesh mesh): dictionary = Return the attributes of the Species to be printed in the VTK file.
           The process is handled through Particles_In_Mesh.
       +loadVTK(Mesh mesh, output) = Takes information of the species from a VTK file through 'output' and stores it in the corresponding attributes.
           The process is handled through Particles_In_Mesh.
       +saveParticlesTXT() String, String, [double, double] = Return the array containing Particle attributes of the species.
           species_data contains, besides attributes being stored, the name of the species.

--------------------------------------------

Proton (Inherits from Species):

Definition = Species that take care of protons.
Attributes:
	+Species attributes.

--------------------------------------------

Proton_SW (Inherits from Species):

Definition = Species that take care of protons coming from solar wind.
Attributes:
	+type (string) = "Proton - Solar wind"
	+Species attributes.

--------------------------------------------

Electron (Inherits from Species):

Definition = Species that take care of electrons.
Attributes:
	+Species attributes.

--------------------------------------------

Electron_SW (Inherits from Species):

Definition = Species that take care of electrons coming from solar wind.
Attributes:
	+type (string) = "Electron - Solar wind"
	+Species attributes.

--------------------------------------------

Ion (Inherits from Species):

Definition = Species that take care of ions.
Attributes:
	+Species attributes.

--------------------------------------------

Neutral (Inherits from Species):

Definition = Species that take care of neutrals.
Attributes:
	+Species attributes.

--------------------------------------------

User_Defined (Inherits from Species):

Definition = Species that serves as dummy species for test porpuses.
Attributes:
	+Species attributes.

--------------------------------------------

Particles_In_Mesh (Abstract)(Composition with Species):

Definition = Store values of distributions in the mesh related with particles. It wraps all the attributes that all particles must have.
Attributes:
	+nPoints (int) = Number of nodes in the mesh (Same as mesh class).
	+density ([double]) = Density values at each node.
	+velocity ([double, double]) = Velocity at each node. Rows are different points, columns are (x,y,z) components if they are available.
	+residuals([double]) = remnants from injection of particles at the previous step.
Methods:
	+saveVTK(Mesh mesh, string name): dictionary = Return the attributes of the Species to be printed in the VTK file.
	+loadVTK(Mesh mesh, output, string name) = Takes information of the species from a VTK file through 'output' and stores it in the corresponding attributes.
    saveParticlesTXT(): string, string, [double,double] = This method return the arrays of particles positions and velocities.
        names refers to the two attributes being stored, and data stores 'current_n', 'pos_dim' and 'vel_dim'.


--------------------------------------------

Electrons_In_Mesh (Inherits from Particles_In_Mesh):

Definition = Actual implementation of Particles_In_Mesh for electrons.
Attributes:
	+flux_spacecraft ([double]) = Perpendicular flux density of electrons going in (+) or out (-) of the spacecraft. The number of rows is the number of points compounding the mesh,
									and each value represents the flux trough the line (area) next to the point (in ant-clockwise direction).
	+Particles_In_Mesh attributes.

--------------------------------------------

Particles(Composition with Species):

Definition = Stores values related with the particles themselves.
Attributes:
	+current_n (int) = current number of particles.
	+max_n (int) = max. number of particles for the species.
	+position ([double,double]) = Position of every particle. Rows are different particles, columns are (x,y,z) if available.
	+velocity ([double,double]) = Position of every particle. Rows are different particles, columns are (x,y,z) components if available.
	+num_tracked (int) = Size of particles being tracked. Defaults to 0 meaning that the species is not being tracked.
	+trackers ([int]) = array of size num_tracked that store the indices of the particles as stored in positions.

---------------------------------------------------------------------------------------------------------------------------------------

Field (Abstract):

Definition = Indicate the attributes and methods that all fields have to implement. The fields obtain the functions to compute the fields from 'solver.py'
Attributes:
	+name (string) = some string that describes the source and type of the field (created by the interaction plasma-spacecraft, user-defined, constant, etc.)
	+pic (PIC) = Class that contains PIC methods.
	+field ([double, double]) = components (columns) of field at each node.
Methods:
	+__init__(...) = This function, for each subclass, will take care of the initial condition of the field.
	+computeField([Species] species) = Computes the updated field values.
	+fieldAtParticles([double,double] position) [double,double] = return an array indicating by component (columns) and particles (rows) the field at every position.
    +saveVTK(Mesh mesh): dictionary = Return the attributes of field to be printed in the VTK file.
        The process is handled inside each particular field, and the final result can be constructed from the output of different subclasses.
    +loadVTK(Mesh mesh, output) = Takes information of the field from a VTK file through 'output' and stores it in the corresponding attributes.
        The process is handled inside each particular field, and the final result can be constructed from the output of different subclasses.

--------------------------------------------

Electric_Field (Inherits from Field):

Definition = Electric field
Attributes:
	+type (string) = some string that describes the source of the electric field (created by the interaction plasma-spacecraft, user-defined, constant, etc.)
	+potential ([double]) = Electric potential at each node of the mesh.
	+Field attributes.
Methods:
	+Field methods.

--------------------------------------------

Constant_Electric_Field(Inherits from Electric_Field):

Definition = Constant electric field impsoed by the user. Does not change through time.
Attributes:
	+type (string) = "Electric field - Constant".
	+Electric_Field attributes.
Methods:
	+Electric_Field methods.

--------------------------------------------

Time_Electric_Field(Electric_Field):

Definition = Electric field dependent on time.
Attributes:
	+type (string) = "Electric field - Constant".
	+Electric_Field attributes.
Methods:
	+Electric_Field methods.
    +computeField(Species species, int p_step, int e_step = 0) = Recieves the steps in the simulation and computes the time from the start of the execution. Then, updates the field accordingly
           with this and any function imposed by the user inside of this method.

--------------------------------------------

Electrostatic_2D_rm_Electric_Field (Inherits from Electric_Field):

Definition = Electric field for a 2D rectangular mesh, detached from the magnetic field. Uses methods from "solver.py" to calculate electric potential, and then electric field.
Attributes:
	+type (string) = "Electric field - Electrostatic_2D_rm".
	+Elctric_Field attributes.
Methods:
	+Electric_Field methods.

--------------------------------------------

Electrostatic_2D_rm_sat (Inherits from Electrostatic_2D_rm):

Definition = Same characteristics as Electrostatic_2D_rm but with an inner boundary representing the satellite.
               For the class it is assumed that the satellite is stored as the second boundary in mesh. The surface is treated as a dielectric.
Attributes:
	+type (string) = "Electric - Electrostatic_2D_rm_sat".
       +inv_capacity ([double,double]) = Inverse of the Capacity matrix for the nodes of the satellite.
           The matrix is organized such that V = C^{-1}*q[location], with 'location' being the location of the nodes in the mesh in sorted order.
	+Elctric_Field attributes.
Methods:
       +floating_potential([Species] species) = Computes the floating potential in a dielectric surface, updating the involved nodes of the 'potential' array.
           This is done through the Capacity matrix method.
       +computeField([Species] species) = First, the floating potential of a dielectric surface is calculated based on the accumulated charge.
           Then, is the same behavior as the method in parent class.
	+Electrostatic_2D_rm methods.

--------------------------------------------

Electrostatic_2D_rm_sat_cond (Inherits from Electrostatic_2D_rm_sat):

Definition = Same characteristics as Electrostatic_2D_rm_sat but the surface is conductive, as opposed to dielectric as in Electrostatic_2D_rm_sat.
               For the class it is assumed that the satellite is stored as the second boundary in mesh.
Attributes:
	+type (string) = "Electric - Electrostatic_2D_rm_sat_cond".
       +inv_capacity ([double,double]) = Inverse of the Capacity matrix for the nodes of the satellite.
           The matrix is organized such that V = C^{-1}*q[location], with 'location' being the location of the nodes in the mesh in sorted order.
       +capacity ([double,double]) = Capacity matrix for the nodes of the satellite. It is organized the same way as inv_caparcity.
	+Electric_Field attributes.
Methods:
       +floating_potential([Species] species) = Computes the floating potential in a conductive surface, updating the involved nodes of the 'potential' array.
           This is done through the Capacity matrix method.
           WARNING: Here, first, the charges are accumuated as the particles impact or leave the surface. Then, the charges are redistributed to account for the
               conductive surface. The change in densities in the surface is updated in 'Electron - Solar wind' class. In reality, all the electrons in the surface
               can move, including, for example, photoelectrons that return to the surface. However, since this code does not track the movement of particles
               in the surface, it is impossible to distingish among different types of electrons. Thus, changes are accumulated in the aforementioned class.
	+Electrostatic_2D_rm_sat methods.

--------------------------------------------

Magnetic_Field (Inherits from Field):

Definition = Magnetic field
Attibutes:
	+type (string) = some string that describes the source of the magnetic field (created by the interaction plasma-spacecraft, user-defined, constant, etc.)
	+Field attributes.
Methods:
	+Field methods.
    +dirichlet(self, location, values) = Computation of Dirichlet boundary condition at every node in location ([ind]). Every row in value ([double]) corresponds to one node in location.

--------------------------------------------

Constant_Magnetic_Field(Inherits from Magnetic_Field):

Definition = Constant Magnetic field impsoed by the user. Does not change through time. It works as a perpendicular field to the 2D dominion of the electric field and particular. Thus, field_dim = 1.
Attributes:
	+type (string) = "Electric - Constant".
	+Magnetic_Field attributes.
Methods:
	+Magnetic_Field methods.

---------------------------------------------------------------------------------------------------------------------------------------

Boundary (Abstract-like: will also have common methods that can be used by sub-classes. In composition with mesh):

Definition = Class that shows the methods and attributes needed for each particular boundary arrangement.
Attributes:
	+type (string) = string indicating the type of boundary. It will be of the form "[Inner or Outer] - [Sorce, e.g. Spacecraft, Component, etc.]".
    +material (string) = String describing the material which is in contact with the boundary. So far, possible options: "space", "satellite".
	+location ([int]) = array containing the indices of the nodes that the boundary represents.
	+directions ([int]) = Number indicating outward direction of the boundary (from domain to outside). 0: Bottom, 1: Right, 2: Top, 3: Left.
	+areas ([double]) = Areas assigned to the nodes of the boundary.
	+adjacent [{int:int}] = A list, with one element per node of the boundary, where the element is a dictionary with entries direction = node, where,
	    for each direction that the node handles, the numeration of the adjacent node in that direction is stored.
Methods:
	+applyElectricBoundary(Electric_Field) = Applies the boundary condition to the electric field passed as argument.
	+applyMagneticBoundary([double]) = Applies the boundary condition to the magnetic field passed as argument.
	+applyParticleBoundary(Species) = Applies the boundary condition to the species passed as argument.
    +createDummyBox([ind]location, PIC pic, Species species, [double] delta_n, [double] n_vel, [double] shift_vel) = create the dummy boxes with particles in them.
   
Methods stored here for convenience:
    +injectParticlesFace(self, location, pic, species, delta_n, n_vel, shift_vel): 
   	++Function that inject particles into the domain.
   	++Parameters: 
   	++location ([ind]) = Nodes indicating the faces where the particles are going to be inserted. Each node represents the volume surrounding it. Location should be ordered increasingly.
   	++pic (PIC) = Instance of PIC for calculations. It also constains mesh, which is used in the function.
   	++species (Species) = Species to be inserted. It contains inside Particles_In_Mesh 'residuals' which is for each node the values of remnants from the insertion at the previous step.
   	++delta_n ([double]) = For each node in location, the density that is going to be inserted at this timestep. The array is ordered with the order of the nodes in mesh.
   	++n_vel ([double,double]) = For each node in location, the thermal velocity (for a the MB distribution) that the inserted particles will represent. Same order as delta_n.
	++shit_vel ([double, double]) = For each node in location, an added velocity that does not come from temperature origin (like solaw wind average speed.

    +injectParticlesDummyBox([int] location, PIC pic, Field field, Species species, [double] delta_n, [double] n_vel, [double] shift_vel) = 
     	Inject the particles in location indices by creating dummy boxes around them, creating particles
    	inside of them, moving the particles, and then adding the ones that entered into the computational domain.
    +addParticles(Species species, [double, double] pos, [double, double] vel) = Add to Species the new particles, each represented by a row in pos and vel.
	+updateTrackers(Species species, int new_particles) = Add new indexes to species.part_values.trackers, indicating the new particles to track.
	    new_particles indicates the latest amount of particles that were added to species.
    +removeParticles(Species species, [ind] ind) = Removes the particles from species stored at 'ind' positions.
    +sampleIsotropicVelocity(double vth, int num) = It receives the most probable speed vth = \sqrt{2kT/m} and creates num random 2D velocities with their magnitudes following a Maxwellian distribution.

--------------------------------------------

Outer_1D_rectangular (Inherits from Boundary):

Definition = One-dimensional boundary part of the outer boundary of a rectangular mesh
Attributes:
	+type (string) = "Outer - 1D_Rectangular"
	+xmin (double) = Left limit of the boundary.
	+xmax (double) = Right limit of the boundary.
	+ymin (double) = Bottom limit of the boundary.
	+ymax (double) = Top limit of the boundary.
       +Boundary attributes
Methods:
	+Boundary methods.

--------------------------------------------

Outer_2D_Rectangular (Inherits from Boundary):

Definition = Outer boundary for a rectangular mesh
Attributes:
	+type (string) = "Outer - 2D_Rectangular"
	+xmin (double) = Left limit of the domain (closest to the Sun).
	+xmax (double) = Right limit of the domain (farthest from the Sun).
	+ymin (double) = Bottom limit of the domain.
	+ymax (double) = Top limit of the domain.
    +bottom ([int]) = array of indices that indicates the represents the bottom of the boundary.
    +top ([int]) = array of indices that indicates the represents the top of the boundary.
    +left ([int]) = array of indices that indicates the represents the left of the boundary.
    +right ([int]) = array of indices that indicates the represents the right of the boundary.
    +Boundary attributes
Methods:
	+Boundary methods.
    +applyParticleOpenBoundary(Species) = Deletes particles of Species  outside of the boundaries.
    +applyParticleReflectiveBoundary(Species species, Species old_species) = Reflects the particles back into the domain.
    	old_species refers to the state of species in the previous step.
    +createDummyBox([ind]location, PIC pic, Species species, [double] delta_n, [double] n_vel, [double] shift_vel) = for every location,
    	create the dummy boxes outside of the domain with particles in them, using delta_n (density), n_vel (thermal velocity), shift_vel (velocity shared by all particles).

--------------------------------------------

Inner_2D_Rectangular (Inherits from Boundary):

Definition = Inner rectangular boundary for a rectangular mesh
Attributes:
	+type (string) = "Inner - 2D_Rectangular"
	+xmin (double) = Left limit of the domain (closest to the Sun).
	+xmax (double) = Right limit of the domain (farthest from the Sun).
	+ymin (double) = Bottom limit of the domain.
	+ymax (double) = Top limit of the domain.
    +bottom ([int]) = array of indices that indicates the represents the bottom of the boundary.
    +top ([int]) = array of indices that indicates the represents the top of the boundary.
    +left ([int]) = array of indices that indicates the represents the left of the boundary.
    +right ([int]) = array of indices that indicates the represents the right of the boundary.
    +ind_inner([int]) = array of indices that lie inside the object sorrounded by this boundary.
    +Boundary attributes
Methods:
	+Boundary methods.
    +applyParticleOpenBoundary(Species) = Deletes particles of Species  outside of the boundaries.
    +applyParticleReflectiveBoundary(Species species, Species old_species) = Reflects the particles back into the domain.
        old_species refers to the state of species in the previous step.
    +createDummyBox([ind]location, PIC pic, Species species, [double] delta_n, [double] n_vel, [double] shift_vel) = for every location,
        create the dummy boxes outside of the domain with particles in them, using delta_n (density), n_vel (thermal velocity), shift_vel (velocity shared by all particles).

---------------------------------------------------------------------------------------------------------------------------------------

Motion_Solver(Abstract-like: As with Boundary, some methods can be applied to various motion solvers, so they will be stored here):

Definition = Class that shows which methods and attributes need to have all motion solvers.
Attributes:
	+type (string) = string indicating the type of scheme.
    +pic_slv (PIC) = PIC solver. For this class specific methods not provided by PIC super class are used.
Methods:
	+initialConfiguration(Species, [Field]) = Make necessary adjustment to the initial configuration of species so as to begin the advancement in time.
		it also takes care of the first update of Particle values in mesh. 
	+advance(Species, [Field]) = Advance the particles in time. It will treat the particles as well as update the mesh_values.
	+updateMeshValues(Species) = Update the attributes of Particles_In_Mesh.
	+updateParticles(Species, [Field]) = Particle advance in time.

--------------------------------------------

Leap_Frog(Inherits from Motion_Solver):

Definition = Implementation of Leap_Frog method. This method, as being more specific, is more dependant on the current situation of each simulation. As such it has to
               be updated or new classes has to be created if the situation varies.

Attributes: 
	+type (string) = "Leap Frog"
    +pic (PIC) = PIC solver. For this class specific methods not provided by PIC super class are used.
    +vel_dic {String : [double,double]} = Is a dictionary containing the new values of velocities for every species. The key 'String' is the actual name of the species.
Methods:
	+initialConfiguration(Species, Field) = Make necessary adjustment to the initial configuration of species so as to begin the advancement in time.
	    So far just E, so [Field]->Field.
	+rewindVelocity(species, field) = Take the velocity of particles half a step back in time for 'field' electric field.
	+advance(Species, [Field]) = Advance the particles in time. It will treat the particles as well as update the mesh_values.
        extent is a karg for updateMeshValues().
        update_dic is a karg for updateParticles(). 
        type_boundary indicates the type of boundary method to apply to particles. 'open', the default mthod, deletes them. 'reflective' reflects them back to the dominion.
        **kwargs may contain arguments necessary for inner methods.
	+updateMeshValues(Species) = Update the attributes of Particles_In_Mesh. Particular for each species, so it needs to be updated with every new species.
	    Extent can be '0' indicating that every attribute of mesh_values is updated, '1' indicating that only necessary attributes are updated, and 
	    '2' indicating that the 'non-necessary' attributes are the only ones updated. Notice that the criteria between 'necessary' and 'non-necessary'
	    attributes will change with the type of phenomena being included.
   +updateParticles(Species, Field, int) = Particle advance in time. So far only E, so [Field]->Field in argument.
       If update_dic == 1, the vel_dic entry for the species is updated, otherwise it remains untouched.
       type_boundary indicates the type of boundary method to apply to particles. 'open', the default mthod, deletes them. 'reflective' reflects them back to the dominion.
       **kwargs may contain arguments necessary for inner methods.
	+motionTreatment(Species species) = It takes the velocities array in the species.part_values atribute and average it with the velocities stored in vel_dic for the particular species.
		That is, to synchronize velocity with position.
	+Motion_Solver methods.

--------------------------------------------

Boris_Push(Inherits from Motion_Solver):

Definition = Implementation of  Boris algorithm for time integration. This method also creates desynchronization between v and x.

Attributes: 
	+type (string) = "Boris Push"
       +pic (PIC) = PIC solver. For this class specific methods not provided by PIC super class are used.
       +vel_dic {String : [double,double]} = Is a dictionary containing the new values of velocities for every species. The key 'String' is the actual name of the species.
Methods:
       +initialConfiguration(Species, Field) = Make necessary adjustment to the initial configuration of species so as to begin the advancement in time.
           So far just E, so [Field]->Field.
       +rewindVelocity(species, field) = Take the velocity of particles half a step back in time for 'field' electric field.
	+advance(Species species, [Field] e_fields, [Field] m_fields) = Advance the particles in time. It will treat the particles as well as update the mesh_values.
           extent is a karg for updateMeshValues().
           update_dic is a karg for updateParticles(). 
           type_boundary indicates the type of boundary method to apply to particles. 'open', the default mthod, deletes them. 'reflective' reflects them back to the dominion.
           **kwargs may contain arguments necessary for inner methods.
	+updateMeshValues(Species) = Update the attributes of Particles_In_Mesh. Particular for each species, so it needs to be updated with every new species.
           Extent can be '0' indicating that every attribute of mesh_values is updated, '1' indicating that only necessary attributes are updated, and 
           '2' indicating that the 'non-necessary' attributes are the only ones updated. Notice that the criteria between 'necessary' and 'non-necessary'
           attributes will change with the type of phenomena being included.
       +updateParticles(Species species, [Field] e_fields, [Field] m_fields, int) = Particle advance in time. The function can receive multiple electric and magnetic fields.
           If update_dic == 1, the vel_dic entry for the species is updated, otherwise it remains untouched.
           type_boundary indicates the type of boundary method to apply to particles. 'open', the default method, deletes them. 'reflective' reflects them back to the dominion.
           **kwargs may contain arguments necessary for inner methods.
       +electricAdvance([double,double] e_field, Species species, double dt) = Updates the velocity one 'dt' forward.
           Boris (1970) advancement in time. Is the usual Leap-Frog advancement in time.
       +magneticRotation (Field B, Species species, double dt) = Update velocity applying magnetic rotation.
           Buneman (1973) rotation.
       +motionTreatment(Species species) = It takes the velocities array in the species.part_values atribute and average it with the velocities stored in vel_dic for the particular species.
           That is, to synchronize velocity with position.
	+Motion_Solver methods.

---------------------------------------------------------------------------------------------------------------------------------------

